{"ast":null,"code":"import _asyncToGenerator from \"/home/pond/security-drone/web-demo/ipond-webrtc/node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ImageGallery from '@/components/ImageGallery.vue';\nimport UserProfile from '@/components/UserProfile.vue';\nimport { Janus } from 'janus-gateway'; // webRTC server location\n\nvar JANUS_URL = 'https://34.143.225.243:8089/janus';\n\nif (window.location.protocol === 'http:') {\n  JANUS_URL = 'http://34.143.225.243:8088/janus';\n}\n\nexport default {\n  name: \"StreamingVideo\",\n  data: function data() {\n    return {\n      // assets\n      assets: {\n        record: require('../../assets/record.svg')\n      },\n      localVideo: document.getElementById('myVideo'),\n      chunks: [],\n      hangup: false,\n      mediaRecorder: null,\n      h_snackbar: false,\n      vid_src: null,\n      snackbar: false,\n      recording: false,\n      False: false,\n      openProfile: false,\n      openGallery: false,\n      mini: true,\n      colors: {\n        background: \"#fff\",\n        text: \"#2F75BB\",\n        vid_bg: \"#322d31\"\n      },\n      menus: [{\n        title: \"Drone01\",\n        icon: \"mdi-quadcopter\"\n      }, {\n        title: \"Drone02\",\n        icon: \"mdi-quadcopter\"\n      }, {\n        title: \"Drone03\",\n        icon: \"mdi-quadcopter\"\n      }],\n      users: {\n        name: \"ICS Team\",\n        email: \"icsco.dev@gmail.com\",\n        src: \"https://randomuser.me/api/portraits/men/85.jpg\"\n      },\n      attach: {\n        plugin: null,\n        message: {\n          status: null\n        },\n        streamList: {\n          selected: null,\n          options: []\n        },\n        remote: {\n          video: 0,\n          track: {},\n          stream: null\n        }\n      },\n      janusError: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    Janus.init({\n      debug: true,\n      dependencies: Janus.useDefaultDependencies(),\n      callback: function callback() {\n        // console.log(\"Connecting to Janus api with server \",JANUS_URL)\n        _this.connect(JANUS_URL);\n      }\n    });\n  },\n  methods: {\n    showGallery: function showGallery() {\n      this.openGallery = true;\n      console.log(this.openGallery);\n      return this.openGallery;\n    },\n    setOpenGallery: function setOpenGallery(value) {\n      this.openGallery = value;\n    },\n    showProfile: function showProfile() {\n      this.openProfile = true;\n      return this.openProfile;\n    },\n    setOpenProfile: function setOpenProfile(value) {\n      this.openProfile = value;\n    },\n    toggleRecord: function toggleRecord() {\n      this.recording = !this.recording;\n      this.snackbar = true;\n\n      if (this.recording === true) {\n        this.startRecord();\n      } else {\n        this.stopRecord();\n        console.log('Stop');\n      }\n    },\n    // Janus Implement\n    // Connect to Janus\n    connect: function connect(server) {\n      var _this2 = this;\n\n      this.janus = new Janus({\n        server: server,\n        // Call on success callback\n        success: function success() {\n          console.log(\"Connected\");\n\n          _this2.attachPlugin();\n        },\n        // Call on error callback\n        error: function error(err) {\n          console.log(\"Error establish connection to Janus server! Please check the server status.\");\n\n          _this2.onError(\"Failed to connect Janus server \", err);\n        },\n        destroyed: function destroyed() {\n          console.log(\"Destroyed\");\n        }\n      });\n    },\n    // Attach Plugin\n    attachPlugin: function attachPlugin() {\n      var _this3 = this;\n\n      this.janus.attach({\n        plugin: \"janus.plugin.streaming\",\n        opaqueId: 'thisisopaqueid',\n        // on Attach plugin success\n        success: function success(pluginHandle) {\n          _this3.attach.plugin = pluginHandle;\n          console.log(\"Attach Plugin Success\");\n\n          _this3.updateStreamsList();\n        },\n        // on Attach plugin error\n        error: function error(err) {\n          _this3.onError(\"Error attaching plugin...! \", err);\n        },\n        iceState: function iceState(state) {\n          console.log(\"ICE state changed to \", state);\n        },\n        webrtcState: function webrtcState(on) {\n          console.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n        },\n        slowLink: function slowLink(uplink, lost, mid) {\n          console.log(\"Janus reports problems \" + (uplink ? \"sending\" : \"receiving\") + \" packets on mid \" + mid + \" (\" + lost + \" lost packets)\");\n        },\n        onmessage: function onmessage(msg, jsep) {\n          // Get message \n          var result = msg.result;\n\n          if (result) {\n            if (result.status) {\n              _this3.attach.message.status = result.status;\n            }\n          } // Handle error message\n          else if (msg.error) {\n            _this3.onError(msg.error);\n\n            return;\n          } // Handle jsep\n\n\n          if (jsep) {\n            Janus.debug(\"Handling SDP as Well.... \", jsep);\n            var stereo = jsep.sdp.indexOf(\"stereo=1\") !== -1;\n\n            _this3.attach.plugin.createAnswer({\n              jsep: jsep,\n              media: {\n                audioSend: false,\n                videoSend: false,\n                data: true\n              },\n              customizeSdp: function customizeSdp(jsep) {\n                if (stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n                  jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n                }\n              },\n              success: function success(jsep) {\n                Janus.debug(\"Got SDP!\", jsep);\n                var body = {\n                  request: \"start\"\n                };\n\n                _this3.attach.plugin.send({\n                  message: body,\n                  jsep: jsep\n                });\n              },\n              error: function error(_error) {\n                _this3.onError(\"WebRTC Error: \", _error);\n\n                alert(\"WebRTC error... \", _error);\n              }\n            });\n          }\n        },\n        onremotetrack: function onremotetrack(track, mid, on) {\n          Janus.debug(\"Remote track (mid=\" + mid + \") \" + (on ? \"added\" : \"removed\") + \":\", track); // New track was added \n\n          if (track.kind === \"video\") {\n            _this3.attach.remote.video += 1;\n            _this3.attach.remote.stream = new MediaStream();\n\n            _this3.attach.remote.stream.addTrack(track.clone());\n\n            _this3.attach.remote.track.mid = _this3.attach.remote.stream;\n            Janus.log(\"Created remote video stream:\", _this3.attach.remote.stream);\n          }\n        },\n        oncleanup: function oncleanup() {\n          _this3.onCleanupCall();\n        }\n      });\n    },\n    // Stream List updater\n    updateStreamsList: function updateStreamsList() {\n      var _this4 = this;\n\n      this.attach.plugin.send({\n        message: {\n          request: \"list\"\n        },\n        success: function success(result) {\n          if (!result) {\n            _this4.onError(\"Got no response to our query for available streams.\");\n          }\n\n          console.log(\"Updating StreamList....\", result);\n          _this4.attach.streamList.options = result.list; // if (result.list.length) {\n          //   this.attach.streamList.selected = this.attach.streamList.options[1].id\n          // }\n        }\n      });\n    },\n    // stop stream\n    stop: function stop() {\n      this.h_snackbar = true;\n      this.attach.plugin.send({\n        message: {\n          request: \"stop\"\n        }\n      });\n    },\n    // start stream\n    start: function start(idx) {\n      // this.stop()\n      if (this.attach.remote.stream !== null) {\n        this.stop();\n      } // this.attach.streamList.selected = this.attach.streamList.options[index].id\n\n\n      this.h_snackbar = true;\n      this.attach.streamList.selected = this.attach.streamList.options[idx].id;\n      this.vid_src = this.attach.remote.stream;\n      this.attach.plugin.send({\n        message: {\n          request: \"watch\",\n          id: this.attach.streamList.selected\n        }\n      });\n    },\n    // Clean up parameter\n    onCleanupCall: function onCleanupCall() {\n      Janus.log(\"Cleaning up.....!\");\n      this.attach.remote.stream = null;\n      this.attach.remote.video = 0;\n      this.attach.remote.track = {};\n      this.attach.message.status = null;\n      this.janusError = null;\n    },\n    // Handle Janus Errors\n    onError: function onError(msg) {\n      var err = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      Janus.error(msg, err);\n      this.janusError = msg + err;\n      alert(this.janusError, function () {\n        window.location.reload();\n      });\n    },\n    // Record zone\n    startRecord: function startRecord() {\n      var _this5 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var options, mediaStreamObj;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = {\n                  videoBitsPerSecond: 2500000,\n                  mimeType: 'video/webm;codecs=h264'\n                };\n\n                if (MediaRecorder.isTypeSupported(options.mimeType)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                alert('mimeType: ' + options.mimeType + \" Not supported\");\n                return _context.abrupt(\"return\");\n\n              case 4:\n                // get MediaStream Object \n                mediaStreamObj = _this5.attach.remote.stream;\n\n                if (mediaStreamObj) {\n                  _context.next = 8;\n                  break;\n                }\n\n                alert(\"Cannot initialize mediaStreamObj\");\n                return _context.abrupt(\"return\");\n\n              case 8:\n                // create MediaRecorder Object \n                _this5.mediaRecorder = new MediaRecorder(mediaStreamObj, options);\n                console.log(_this5.mediaRecorder);\n\n                _this5.mediaRecorder.start(); // Listen dataavailable event\n\n\n                _this5.mediaRecorder.addEventListener('dataavailable', function (e) {\n                  if (e.data && e.data.size > 0) {\n                    _this5.chunks.push(e.data);\n                  }\n\n                  console.log(\"Data =========== \", _this5.chunks);\n                }, true);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    stopRecord: function stopRecord() {\n      var _this6 = this;\n\n      this.mediaRecorder.stop();\n      this.mediaRecorder.addEventListener('stop', function () {\n        var blobldata = new Blob(_this6.chunks);\n\n        if (blobldata.size > 0) {\n          console.log(\"Collected data size ===== \", blobldata.size); // save data \n\n          var blobUrl = URL.createObjectURL(blobldata);\n          console.log(\"URL ======= \", blobUrl); // auto download\n\n          var link = document.createElement('a');\n          link.href = blobUrl;\n          link.download = _this6.dateFormat() + '.webm';\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          window.URL.revokeObjectURL(blobUrl);\n        } // clear \n\n\n        _this6.chunks = [];\n        _this6.mediaRecorder = null;\n      }, true);\n    },\n    dateFormat: function dateFormat() {\n      var datetime = new Date();\n      var today = datetime.getDate() + '-' + (datetime.getMonth() + 1) + '-' + datetime.getFullYear() + ' at ' + datetime.getHours() + '.' + datetime.getMinutes();\n      return today;\n    }\n  },\n  components: {\n    ImageGallery: ImageGallery,\n    UserProfile: UserProfile\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2KA;AACA;AAIA,sC,CAEA;;AACA;;AACA;AACAA;AACA;;AAEA;AACAC,wBADA;AAEAC;AACA;AACA;AACAC;AACAC;AADA,OAFA;AAMAC,oDANA;AAOAC,gBAPA;AAQAC,mBARA;AASAC,yBATA;AAUAC,uBAVA;AAWAC,mBAXA;AAYAC,qBAZA;AAaAC,sBAbA;AAcAC,kBAdA;AAeAC,wBAfA;AAgBAC,wBAhBA;AAiBAC,gBAjBA;AAkBAC;AACAC,0BADA;AAEAC,uBAFA;AAGAC;AAHA,OAlBA;AAuBAC,cACA;AAAAC;AAAAC;AAAA,OADA,EAEA;AAAAD;AAAAC;AAAA,OAFA,EAGA;AAAAD;AAAAC;AAAA,OAHA,CAvBA;AA4BAC;AACAvB,wBADA;AAEAwB,oCAFA;AAGAC;AAHA,OA5BA;AAiCAC;AACAC,oBADA;AAEAC;AACAC;AADA,SAFA;AAKAC;AACAC,wBADA;AAEAC;AAFA,SALA;AASAC;AACAC,kBADA;AAEAC,mBAFA;AAGAC;AAHA;AATA,OAjCA;AAgDAC;AAhDA;AAkDA,GArDA;AAsDAC,SAtDA,qBAsDA;AAAA;;AACAC;AACAC,iBADA;AAEAC,kDAFA;AAGAC;AACA;AACA;AACA;AANA;AAQA,GA/DA;AAgEAC;AAEAC,eAFA,yBAEA;AACA;AACAC;AACA;AACA,KANA;AAOAC,kBAPA,0BAOAC,KAPA,EAOA;AACA;AACA,KATA;AAUAC,eAVA,yBAUA;AACA;AACA;AACA,KAbA;AAcAC,kBAdA,0BAcAF,KAdA,EAcA;AACA;AACA,KAhBA;AAiBAG,gBAjBA,0BAiBA;AACA;AACA;;AACA;AACA;AACA,OAFA,MAEA;AACA;AACAL;AACA;AACA,KA1BA;AA4BA;AACA;AACAM,WA9BA,mBA8BAC,MA9BA,EA8BA;AAAA;;AACA;AAAAA;AACA;AACAC;AACAR;;AACA;AACA,SALA;AAMA;AACAS;AACAT;;AACA;AACA,SAVA;AAWAU;AACAV;AACA;AAbA;AAeA,KA9CA;AAgDA;AACAW,gBAjDA,0BAiDA;AAAA;;AACA;AACA7B,wCADA;AAEA8B,kCAFA;AAGA;AACAJ;AACA;AACAR;;AACA;AACA,SARA;AASA;AACAS;AACA;AACA,SAZA;AAaAI;AACAb;AACA,SAfA;AAgBAc;AACAd;AACA,SAlBA;AAmBAe;AACAf,uFACA,kBADA,GACAgB,GADA,GACA,IADA,GACAC,IADA,GACA,gBADA;AAEA,SAtBA;AAuBAC;AACA;AACA;;AACA;AACA;AACA;AACA;AACA,WAJA,CAKA;AALA,eAMA;AACA;;AACA;AACA,WAZA,CAcA;;;AACA;AACAxB;AACA;;AACA;AACAyB,wBADA;AAEAC;AACAC,gCADA;AAEAC,gCAFA;AAGAlE;AAHA,eAFA;AAOAmE;AACA;AACAJ;AACA;AACA,eAXA;AAYAX;AACAd;AACA;AAAA8B;AAAA;;AACA;AACAzC,+BADA;AAEAoC;AAFA;AAIA,eAnBA;AAoBAV;AACA;;AACAgB;AACA;AAvBA;AAyBA;AACA,SAnEA;AAoEAC;AACAhC,mGADA,CAEA;;AACA;AACA;AACA;;AACA;;AACA;AACAA;AACA;AACA,SA9EA;AAgFAiC;AACA;AACA;AAlFA;AAoFA,KAtIA;AAuIA;AACAC,qBAxIA,+BAwIA;AAAA;;AACA;AACA7C;AAAAyC;AAAA,SADA;AAEAhB;AACA;AACA;AACA;;AACAR;AACA,yDALA,CAMA;AACA;AACA;AACA;AAXA;AAaA,KAtJA;AAuJA;AACA6B,QAxJA,kBAwJA;AAEA;AACA;AAAA9C;AAAAyC;AAAA;AAAA;AACA,KA5JA;AA6JA;AACAM,SA9JA,iBA8JAC,GA9JA,EA8JA;AACA;AACA;AACA;AACA,OAJA,CAKA;;;AAEA;AACA;AACA;AACA;AAAAhD;AAAAyC;AAAAQ;AAAA;AAAA;AACA,KAzKA;AA0KA;AACAC,iBA3KA,2BA2KA;AACAvC;AACA;AACA;AACA;AACA;AACA;AACA,KAlLA;AAoLA;AACAwC,WArLA,mBAqLAC,GArLA,EAqLA;AAAA;AACAzC;AACA;AACA+B;AACAW;AACA,OAFA;AAGA,KA3LA;AA4LA;AACAC,eA7LA,yBA6LA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAlD,uBADA,GACA;AACAmD,6CADA;AAEAC;AAFA,iBADA;;AAAA,oBAKAC,+CALA;AAAA;AAAA;AAAA;;AAMAf;AANA;;AAAA;AAUA;AACAgB,8BAXA,GAWA,2BAXA;;AAAA,oBAYAA,cAZA;AAAA;AAAA;AAAA;;AAaAhB;AAbA;;AAAA;AAiBA;AACA;AACAzB;;AAEA,6CArBA,CAuBA;;;AACA;AACA;AACA;AACA;;AACAA;AACA,iBALA,EAKA,IALA;;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BA,KA3NA;AA4NA0C,cA5NA,wBA4NA;AAAA;;AACA;AAEA;AACA;;AACA;AACA1C,oEADA,CAGA;;AACA;AACAA,+CALA,CAOA;;AACA;AACA2C;AAEAA;AAEAC;AACAD;AACAC;AAEAR;AACA,SApBA,CAsBA;;;AACA;AACA;AACA,OAzBA,EAyBA,IAzBA;AA0BA,KAzPA;AA0PAS,cA1PA,wBA0PA;AACA;AACA;AACA;AACA;AA9PA,GAhEA;AAuUAC;AAAAC;AAAAC;AAAA;AAvUA","names":["JANUS_URL","name","data","assets","record","localVideo","chunks","hangup","mediaRecorder","h_snackbar","vid_src","snackbar","recording","False","openProfile","openGallery","mini","colors","background","text","vid_bg","menus","title","icon","users","email","src","attach","plugin","message","status","streamList","selected","options","remote","video","track","stream","janusError","mounted","Janus","debug","dependencies","callback","methods","showGallery","console","setOpenGallery","value","showProfile","setOpenProfile","toggleRecord","connect","server","success","error","destroyed","attachPlugin","opaqueId","iceState","webrtcState","slowLink","mid","lost","onmessage","jsep","media","audioSend","videoSend","customizeSdp","request","alert","onremotetrack","oncleanup","updateStreamsList","stop","start","idx","id","onCleanupCall","onError","msg","window","startRecord","videoBitsPerSecond","mimeType","MediaRecorder","mediaStreamObj","stopRecord","link","document","dateFormat","components","ImageGallery","UserProfile"],"sourceRoot":"src/views/Main","sources":["StreamingVideo.vue"],"sourcesContent":["<template>\n  <v-container fill-height fluid class=\"pa-0 ma-0 \" ref=\"main\" width=\"100%\">\n    <v-card width=\"100%\" height=\"100%\" class=\"d-flex\" :color=\"colors.vid_bg\">\n        <!-- main menu drawer -->\n      <v-navigation-drawer\n      :color=\"colors.background\"\n      :mini-variant.sync=\"mini\"\n      mini-variant-width=\"56\"\n      clipped\n      app\n      ref=\"navDrawer\"\n      width=\"300\"\n      permanent\n      >\n\n        <!-- List menus -->\n        <v-list-item class=\"px-2 my-4\">\n          <v-list-item-avatar>\n            <!-- <v-img :src=\"users.src\" ></v-img> -->\n            <v-avatar\n            color=\"blue lighten-3\">ICS</v-avatar>\n          </v-list-item-avatar>\n\n          <v-list-item-title>\n            <h3 style=\"color:#2F75BB\">{{users.name}}</h3>\n            <h5 class=\"pt-2\">{{users.email}}</h5>\n          </v-list-item-title>\n\n          <v-btn\n          icon\n          @click.stop=\"mini = !mini\"\n          >\n          <v-icon :color=\"colors.text\">mdi-chevron-left</v-icon>\n          </v-btn>\n        </v-list-item>\n        \n        <v-divider :color=\"colors.text\" class=\"my-4\"></v-divider>\n\n        <v-list  two-line dense nav>\n          <v-list-item-group\n          id=\"list-group\">\n            <!-- <v-list-item\n            :color=\"colors.text\"\n            v-for=\"menu in menus\"\n            :key=\"menu.title\">\n              <v-list-item-icon class=\"my-6\" >\n                <v-icon >{{menu.icon}}</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3>{{menu.title}}</h3></v-list-item-title>\n              </v-list-item-content>\n            </v-list-item> -->\n            \n            <v-list-item \n            :color=\"colors.text\"\n            v-for=\"option, index in attach.streamList.options\"\n            :key=\"option.id\"\n            @click=\"start(index)\">\n              <v-list-item-icon class=\"my-6\">\n                <v-icon>mdi-quadcopter</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3>{{ option.description }}</h3></v-list-item-title>\n              </v-list-item-content>\n              \n            </v-list-item>\n\n            <!-- Gallery -->\n            <v-list-item\n            @click.prevent=\"showGallery\">\n              <v-list-item-icon class=\"my-6\">\n                <v-icon>mdi-image-multiple</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3>Gallery</h3></v-list-item-title>\n              </v-list-item-content>\n\n              <!-- Gallery component -->\n              <ImageGallery \n              :showDialog=\"openGallery\"\n              @closeGallery=\"setOpenGallery\"\n              />\n            </v-list-item>\n\n            <!-- User Profile -->\n            <v-list-item\n            @click.prevent=\"showProfile\">\n              <v-list-item-icon class=\"my-6\">\n                <v-icon>mdi-account</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3>My Account</h3></v-list-item-title>\n              </v-list-item-content>\n\n              <!-- User Profile component -->\n              <UserProfile \n              :showProfile=\"openProfile\"\n              :username=\"users.name\"\n              :useremail=\"users.email\"\n              :userimgsrc=\"users.src\"\n              @closeUserProfile=\"setOpenProfile\"\n              />\n            </v-list-item>\n          </v-list-item-group>\n        </v-list>\n\n        <!-- List menus -->\n      </v-navigation-drawer>\n      <!-- main menu drawer -->\n\n      <!-- Video field -->\n      <v-card width=\"100%\" height=\"100%\" tile class=\"d-flex justify-center \" :color=\"colors.vid_bg\">\n        <video id=\"player\"  :srcObject.prop=\"attach.remote.stream\"  playsinline autoplay loop ></video>\n\n        <!-- Video Overlat record button -->\n        <v-overlay\n        absolute\n        opacity=\"0\"\n        style=\"height:25px ; width:60px; left:45%; top:92%\"\n        :dark=\"False\">\n          <v-tooltip top >\n            <template v-slot:activator=\"{on}\">\n              <v-btn\n              rounded  \n              v-on=\"on\"\n              style=\"opacity:0.9\"\n              class=\"\"\n              @click=\"toggleRecord\">\n              <v-snackbar\n              v-model=\"snackbar\"\n              app\n              timeout=\"2000\"\n              top\n              light\n              color=\"success\"\n              content-class=\"d-flex justify-center\"\n              >\n                {{!recording ? 'Stop Recording Stream!' : 'Recording Stream'}}\n              </v-snackbar>\n                <span class=\"text-h5\">{{recording ? ' 00:00 ' : null}}</span>\n                <!-- <v-icon v-if=\"recording === false\" color=\"error\">mdi-radiobox-marked</v-icon>\n                <v-icon v-else color=\"error\" class=\"ml-4\">mdi-stop</v-icon> -->\n              </v-btn>\n\n              <v-snackbar\n              v-model=\"h_snackbar\"\n              app\n              timeout=\"20000\"\n              centered\n              light\n              color=\"light-blue darken-1\"\n              content-class=\"d-flex justify-center\"\n              >\n                {{hangup ? 'Hanging up the Stream!' : 'Preparing incoming Stream'}}\n              </v-snackbar>\n            </template>\n            <span v-if=\"recording === false\">Start Record Video</span>\n            <span  v-else >Stop Recording</span>\n          </v-tooltip>\n\n        </v-overlay>\n\n      </v-card>\n      <!-- Video field -->\n      \n    </v-card>\n\n  </v-container>\n</template>\n\n<script>\nimport ImageGallery from '@/components/ImageGallery.vue'\nimport UserProfile from '@/components/UserProfile.vue';\n\n\n\nimport { Janus } from 'janus-gateway'\n\n// webRTC server location\nlet JANUS_URL = 'https://34.143.225.243:8089/janus'\nif(window.location.protocol === 'http:'){\n   JANUS_URL = 'http://34.143.225.243:8088/janus'\n}\n\nexport default {\n    name: \"StreamingVideo\",\n    data: () => {\n        return {  \n            // assets\n            assets:{\n              record: require('../../assets/record.svg'),\n            },\n\n            localVideo: document.getElementById('myVideo'),\n            chunks: [],\n            hangup: false,\n            mediaRecorder: null,\n            h_snackbar: false,\n            vid_src: null,\n            snackbar: false,\n            recording: false,\n            False : false,\n            openProfile: false,\n            openGallery: false,\n            mini: true,\n            colors: {\n                background: \"#fff\",\n                text: \"#2F75BB\",\n                vid_bg: \"#322d31\"\n            },\n            menus: [\n                { title: \"Drone01\", icon: \"mdi-quadcopter\" },\n                { title: \"Drone02\", icon: \"mdi-quadcopter\" },\n                { title: \"Drone03\", icon: \"mdi-quadcopter\" },\n            ],\n            users:{\n              name: \"ICS Team\",\n              email: \"icsco.dev@gmail.com\",\n              src:  \"https://randomuser.me/api/portraits/men/85.jpg\"\n            },\n            attach:{\n              plugin: null,\n              message: {\n                status: null\n              },\n              streamList: {\n                selected: null,\n                options: []\n              },\n              remote: {\n                video: 0,\n                track: {},\n                stream: null,\n              }\n            },\n            janusError: null\n        };\n    },\n    mounted() {\n      Janus.init({\n        debug: true,\n        dependencies: Janus.useDefaultDependencies(),\n        callback: ()=>{\n          // console.log(\"Connecting to Janus api with server \",JANUS_URL)\n          this.connect(JANUS_URL)\n        }\n      })\n    },\n    methods: {\n        \n        showGallery() {\n            this.openGallery = true;\n            console.log(this.openGallery)\n            return this.openGallery;\n        },\n        setOpenGallery(value){\n          this.openGallery = value\n        },\n        showProfile(){\n          this.openProfile = true;\n          return this.openProfile\n        },\n        setOpenProfile(value){\n          this.openProfile = value\n        },\n        toggleRecord(){\n          this.recording = !this.recording\n          this.snackbar = true\n          if(this.recording  === true){\n            this.startRecord()\n          }else{\n            this.stopRecord()\n            console.log('Stop')\n          }\n        },\n\n        // Janus Implement\n        // Connect to Janus\n        connect(server){\n          this.janus = new Janus({server,\n            // Call on success callback\n            success: ()=>{\n              console.log(\"Connected\")\n              this.attachPlugin()\n            },\n            // Call on error callback\n            error: (err)=>{\n              console.log(\"Error establish connection to Janus server! Please check the server status.\")\n              this.onError(\"Failed to connect Janus server \",err)\n            },\n            destroyed: ()=>{\n              console.log(\"Destroyed\")\n            }\n          })\n        },\n\n        // Attach Plugin\n        attachPlugin() {\n          this.janus.attach({\n            plugin:   \"janus.plugin.streaming\",\n            opaqueId: 'thisisopaqueid',\n            // on Attach plugin success\n            success: (pluginHandle) => {\n              this.attach.plugin = pluginHandle\n              console.log(\"Attach Plugin Success\")\n              this.updateStreamsList()\n            },\n            // on Attach plugin error\n            error: (err) => {\n              this.onError(\"Error attaching plugin...! \",err)\n            },\n            iceState: (state) => {\n              console.log(\"ICE state changed to \",state)\n            },\n            webrtcState: (on) => {\n              console.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\")\n            },\n            slowLink: (uplink, lost, mid) => {\n              console.log(\"Janus reports problems \" + (uplink ? \"sending\" : \"receiving\") +\n                        \" packets on mid \" + mid + \" (\" + lost + \" lost packets)\")\n            },\n            onmessage: (msg, jsep) => {\n              // Get message \n              let result = msg.result\n              if(result){\n                if(result.status){\n                  this.attach.message.status = result.status\n                }\n              }\n              // Handle error message\n              else if(msg.error){\n                this.onError(msg.error)\n                return;\n              }\n\n              // Handle jsep\n              if(jsep){\n                Janus.debug(\"Handling SDP as Well.... \",jsep)\n                let stereo = (jsep.sdp.indexOf(\"stereo=1\") !== -1 )\n                this.attach.plugin.createAnswer({\n                  jsep: jsep,\n                  media: {\n                    audioSend: false,\n                    videoSend: false,\n                    data:      true,\n                  },\n                  customizeSdp: (jsep) => {\n                    if(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1 ) {\n                      jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\")\n                    }\n                  },\n                  success: (jsep) => {\n                    Janus.debug(\"Got SDP!\", jsep)\n                    let body = { request: \"start\"}\n                    this.attach.plugin.send({\n                      message: body,\n                      jsep: jsep\n                    })\n                  },\n                  error: (error) => {\n                    this.onError(\"WebRTC Error: \",error)\n                    alert(\"WebRTC error... \" , error)\n                  }\n                })\n              }\n            },\n            onremotetrack: (track , mid, on) => {\n              Janus.debug(\"Remote track (mid=\" + mid + \") \" + (on ? \"added\" : \"removed\") + \":\", track)\n              // New track was added \n              if(track.kind === \"video\") {\n                this.attach.remote.video += 1 \n                this.attach.remote.stream = new MediaStream()\n                this.attach.remote.stream.addTrack(track.clone())\n                this.attach.remote.track.mid = this.attach.remote.stream\n                Janus.log(\"Created remote video stream:\", this.attach.remote.stream)\n              }\n            },\n\n            oncleanup: () => {\n              this.onCleanupCall()\n            }\n          })\n        },\n      // Stream List updater\n      updateStreamsList() {\n        this.attach.plugin.send ({\n          message: { request: \"list\"},\n          success: (result) => {\n            if(!result) {\n              this.onError(\"Got no response to our query for available streams.\")\n            }\n            console.log(\"Updating StreamList....\",result)\n            this.attach.streamList.options = result.list\n            // if (result.list.length) {\n            //   this.attach.streamList.selected = this.attach.streamList.options[1].id\n            // }\n          }\n        })\n      },\n      // stop stream\n      stop() {\n        \n        this.h_snackbar = true\n        this.attach.plugin.send({ message: { request: \"stop\" } } )\n      },\n      // start stream\n      start(idx){\n        // this.stop()\n        if(this.attach.remote.stream !== null){\n          this.stop()\n        }\n        // this.attach.streamList.selected = this.attach.streamList.options[index].id\n        \n        this.h_snackbar = true\n        this.attach.streamList.selected = this.attach.streamList.options[idx].id\n        this.vid_src = this.attach.remote.stream\n        this.attach.plugin.send({ message: { request: \"watch\", id: this.attach.streamList.selected } })\n      },\n      // Clean up parameter\n      onCleanupCall(){\n        Janus.log(\"Cleaning up.....!\")\n        this.attach.remote.stream = null\n        this.attach.remote.video = 0\n        this.attach.remote.track = {}\n        this.attach.message.status = null\n        this.janusError = null\n      },\n\n      // Handle Janus Errors\n      onError(msg, err='') {\n        Janus.error(msg, err)\n        this.janusError = msg + err\n        alert(this.janusError, function(){\n          window.location.reload()\n        })\n      },\n      // Record zone\n      async startRecord() {\n        const options = {\n            videoBitsPerSecond : 2500000,\n            mimeType : 'video/webm;codecs=h264'\n          }\n        if(!MediaRecorder.isTypeSupported(options.mimeType)){\n          alert('mimeType: '+ options.mimeType + \" Not supported\")\n          return ;\n        }\n\n        // get MediaStream Object \n        const mediaStreamObj = this.attach.remote.stream\n        if(!mediaStreamObj){\n          alert(\"Cannot initialize mediaStreamObj\")\n          return\n        }\n\n        // create MediaRecorder Object \n        this.mediaRecorder = new MediaRecorder(mediaStreamObj, options)\n        console.log(this.mediaRecorder)\n\n        this.mediaRecorder.start()\n\n        // Listen dataavailable event\n        this.mediaRecorder.addEventListener('dataavailable' ,(e) => {\n          if (e.data && e.data.size > 0) {\n            this.chunks.push(e.data)\n          }\n          console.log(\"Data =========== \",this.chunks)\n        },true)\n      },\n      stopRecord(){\n        this.mediaRecorder.stop()\n\n        this.mediaRecorder.addEventListener('stop', ()=> {\n          const blobldata = new Blob(this.chunks)\n          if(blobldata.size > 0){\n            console.log(\"Collected data size ===== \",blobldata.size)\n\n            // save data \n            const blobUrl = URL.createObjectURL(blobldata)\n            console.log(\"URL ======= \", blobUrl)\n\n            // auto download\n            const link = document.createElement('a')\n            link.href = blobUrl\n\n            link.download = this.dateFormat()+'.webm'\n\n            document.body.appendChild(link)\n            link.click()\n            document.body.removeChild(link)\n\n            window.URL.revokeObjectURL(blobUrl)\n          }\n\n          // clear \n          this.chunks = []\n          this.mediaRecorder = null \n        },true)\n      },\n      dateFormat(){\n        const datetime = new Date()\n        const today = datetime.getDate() + '-' + (datetime.getMonth()+1) + '-' + datetime.getFullYear() + ' at ' + datetime.getHours() + '.' + datetime.getMinutes()\n        return today\n      }\n      \n      \n      \n    },\n\n\n\n    \n    components: { ImageGallery, UserProfile }\n}\n</script>\n\n<style>\n:-webkit-scrollbar{\n    width:2px;\n}\n::-webkit-scrollbar-track {\n\t\n  background: #f1f1f1; \n}\n \n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: #888; \n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #555; \n}\n</style>"]},"metadata":{},"sourceType":"module"}