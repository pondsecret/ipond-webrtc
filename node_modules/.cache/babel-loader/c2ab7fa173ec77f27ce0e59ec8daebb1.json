{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Janus } from 'janus-gateway'; // const JANUS_URL = 'http://127.0.0.1:8088/janus'\n//const JANUS_URL = 'http://34.87.84.21:8088/janus'\n\nvar JANUS_URL = 'https://34.143.225.243:8089/janus';\n\nif (window.location.protocol === 'http:') {\n  JANUS_URL = 'http://34.143.225.243:8088/janus';\n}\n\nexport default {\n  name: 'App',\n  data: function data() {\n    return {\n      janus: null,\n      error: null,\n      plugin: null,\n      status: null,\n      stream: null,\n      streamList: {\n        selected: null,\n        options: []\n      },\n      remoteTracks: {},\n      remoteVideos: 0\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    Janus.init({\n      debug: true,\n      dependencies: Janus.useDefaultDependencies(),\n      callback: function callback() {\n        console.log(\"Connecting to Janus api with server \", JANUS_URL);\n\n        _this.connect(JANUS_URL);\n      }\n    });\n  },\n  methods: {\n    connect: function connect(server) {\n      var _this2 = this;\n\n      this.janus = new Janus({\n        server: server,\n        // Call success callback\n        success: function success() {\n          console.log(\"Connected\");\n\n          _this2.attachPlugin();\n        },\n        // Call error callback \n        error: function error(_error) {\n          console.log(\"Error\");\n\n          _this2.onError('Failed to connect janus server', _error);\n        },\n        // Call destroyed callback\n        destroyed: function destroyed() {\n          console.log(\"Destroyed\");\n          window.location.reload();\n        }\n      });\n    },\n    attachPlugin: function attachPlugin() {\n      var _this3 = this;\n\n      this.janus.attach({\n        plugin: \"janus.plugin.streaming\",\n        opaqueId: 'thisisopaqueid',\n        success: function success(pluginHandle) {\n          _this3.plugin = pluginHandle;\n          console.log(\"getBitrate : \", _this3.plugin.getBitrate());\n\n          _this3.updateStreamsList();\n        },\n        error: function error(_error2) {\n          _this3.onError('Error attaching plugin... ', _error2);\n        },\n        iceState: function iceState(state) {\n          console.log(\"ICE state changed to \", state);\n        },\n        webrtcState: function webrtcState(on) {\n          console.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n        },\n        slowLink: function slowLink(uplink, lost, mid) {\n          console.log(\"Janus reports problems \" + (uplink ? \"sending\" : \"receiving\") + \" packets on mid \" + mid + \" (\" + lost + \" lost packets)\");\n        },\n        onmessage: function onmessage(msg, jsep) {\n          // Receive status of plugin streaming \n          console.log(\" ::: Got a message :::\", msg);\n          var result = msg.result;\n\n          if (result) {\n            if (result.status) {\n              _this3.status = result.status;\n            }\n          } // Handle msg error status \n          else if (msg.error) {\n            _this3.onError(msg.error);\n\n            _this3.stop();\n\n            return;\n          }\n\n          if (jsep) {\n            Janus.debug(\"Handling SDP as Well... \", jsep);\n            var stereo = jsep.sdp.indexOf(\"stereo=1\") !== -1;\n\n            _this3.plugin.createAnswer({\n              jsep: jsep,\n              media: {\n                audioSend: false,\n                videoSend: false,\n                data: true\n              },\n              customizeSdp: function customizeSdp(jsep) {\n                if (stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n                  jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n                }\n              },\n              success: function success(jsep) {\n                Janus.debug(\"Got SDP!\", jsep);\n                var body = {\n                  request: \"start\"\n                };\n\n                _this3.plugin.send({\n                  message: body,\n                  jsep: jsep\n                });\n              },\n              error: function error(_error3) {\n                _this3.onError(\"WebRTC Error: \", _error3);\n\n                alert(\"WebRTC error... \", _error3);\n              }\n            });\n          }\n        },\n        onremotetrack: function onremotetrack(track, mid, on) {\n          Janus.debug(\"Remote track (mid=\" + mid + \") \" + (on ? \"added\" : \"removed\") + \":\", track); // New track was added \n\n          if (track.kind === \"video\") {\n            _this3.remoteVideos++;\n            _this3.stream = new MediaStream();\n\n            _this3.stream.addTrack(track.clone());\n\n            _this3.remoteTracks.mid = _this3.stream;\n            Janus.log(\"Created remote audio stream:\", _this3.stream);\n          }\n        },\n        oncleanup: function oncleanup() {\n          _this3.onCleanup();\n        }\n      });\n    },\n    updateStreamsList: function updateStreamsList() {\n      var _this4 = this;\n\n      this.plugin.send({\n        message: {\n          request: \"list\"\n        },\n        success: function success(result) {\n          if (!result) {\n            _this4.onError(\"Got no response to our query for available streams.\");\n          }\n\n          console.log(\"Updating StreamList....\", result);\n          _this4.streamList.options = result.list;\n\n          if (result.list.length) {\n            _this4.streamList.selected = _this4.streamList.options[0].id;\n          }\n        }\n      });\n    },\n    start: function start() {\n      this.plugin.send({\n        message: {\n          request: \"watch\",\n          id: this.streamList.selected\n        }\n      });\n    },\n    stop: function stop() {\n      this.plugin.send({\n        message: {\n          request: \"stop\"\n        }\n      });\n      this.plugin.hangup();\n    },\n    // Reset data.params to null \n    onCleanup: function onCleanup() {\n      Janus.log(\" ::: Got a cleanup notification :::\");\n      this.stream = null;\n      this.status = null;\n      this.remoteTracks = {};\n      this.remoteVideos = 0;\n      this.error = null;\n    },\n    // Handle on error event occur\n    onError: function onError(message) {\n      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      Janus.error(message, error);\n      this.error = message + error;\n      alert(this.error, function () {\n        window.location.reload();\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,sC,CAEA;AACA;;AACA;;AACA;AACAA;AACA;;AAGA;AACAC,aADA;AAEAC,MAFA,kBAEA;AACA;AACAC,iBADA;AAEAC,iBAFA;AAGAC,kBAHA;AAIAC,kBAJA;AAKAC,kBALA;AAMAC;AACAC,sBADA;AAEAC;AAFA,OANA;AAUAC,sBAVA;AAWAC;AAXA;AAaA,GAhBA;AAiBAC,SAjBA,qBAiBA;AAAA;;AACAC;AACAC,iBADA;AAEAC,kDAFA;AAGAC;AACAC;;AACA;AACA;AANA;AAQA,GA1BA;AA2BAC;AACAC,WADA,mBACAC,MADA,EACA;AAAA;;AACA;AAAAA;AACA;AACAC;AACAJ;;AACA;AACA,SALA;AAMA;AACAd;AACAc;;AACA;AACA,SAVA;AAWA;AACAK;AACAL;AACAM;AACA;AAfA;AAiBA,KAnBA;AAqBAC,gBArBA,0BAqBA;AAAA;;AACA;AACApB,wCADA;AAEAqB,kCAFA;AAGAJ;AACA;AACAJ;;AACA;AACA,SAPA;AAQAd;AACA;AACA,SAVA;AAWAuB;AACAT;AACA,SAbA;AAcAU;AACAV;AACA,SAhBA;AAiBAW;AACAX,uFACA,kBADA,GACAY,GADA,GACA,IADA,GACAC,IADA,GACA,gBADA;AAEA,SApBA;AAqBAC;AACA;AACAd;AACA;;AACA;AACA;AACA;AACA;AACA,WAJA,CAKA;AALA,eAMA;AACA;;AACA;;AACA;AACA;;AACA;AACAJ;AACA;;AACA;AACAmB,wBADA;AAEAC;AACAC,gCADA;AAEAC,gCAFA;AAGAlC;AAHA,eAFA;AAOAmC;AACA;AACAJ;AACA;AACA,eAXA;AAYAX;AACAR;AACA;AAAAwB;AAAA;;AACA;AACAC,+BADA;AAEAN;AAFA;AAIA,eAnBA;AAoBA7B;AACA;;AACAoC;AACA;AAvBA;AAyBA;AACA,SAjEA;AAkEAC;AACA3B,mGADA,CAEA;;AACA;AACA;AACA;;AACA;;AACA;AACAA;AACA;AACA,SA5EA;AA8EA4B;AACA;AACA;AAhFA;AAkFA,KAxGA;AAyGAC,qBAzGA,+BAyGA;AAAA;;AACA;AACAJ;AAAAD;AAAA,SADA;AAEAhB;AACA;AACA;AACA;;AACAJ;AACA;;AACA;AACA;AACA;AACA;AAXA;AAaA,KAvHA;AAwHA0B,SAxHA,mBAwHA;AACA;AAAAL;AAAAD;AAAAO;AAAA;AAAA;AACA,KA1HA;AA2HAC,QA3HA,kBA2HA;AACA;AAAAP;AAAAD;AAAA;AAAA;AACA;AACA,KA9HA;AA+HA;AACAS,aAhIA,uBAgIA;AACAjC;AACA;AACA;AACA;AACA;AACA;AACA,KAvIA;AAwIA;AACAkC,WAzIA,mBAyIAT,OAzIA,EAyIA;AAAA;AACAzB;AACA;AACA0B;AACAhB;AACA,OAFA;AAGA;AA/IA;AA3BA","names":["JANUS_URL","name","data","janus","error","plugin","status","stream","streamList","selected","options","remoteTracks","remoteVideos","mounted","Janus","debug","dependencies","callback","console","methods","connect","server","success","destroyed","window","attachPlugin","opaqueId","iceState","webrtcState","slowLink","mid","lost","onmessage","jsep","media","audioSend","videoSend","customizeSdp","request","message","alert","onremotetrack","oncleanup","updateStreamsList","start","id","stop","onCleanup","onError"],"sourceRoot":"src","sources":["App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <h1>iPOND WebRTC Studio</h1>\n    <h3>Using Janus webRTC server.</h3>\n    <div class=\"select-ctn\">\n      <select v-model=\"streamList.selected\" :disabled=\"stream\">\n        <option v-for=\"option in streamList.options\" :key=\"option.id\" :value=\"option.id\">\n          {{ option.description }}\n        </option>\n      </select>\n      <div>{{ stream == null ? \"null\" : notNull }}</div>\n      <button @click.prevent=\"start\" :disabled=\"stream\">Start</button>\n      <button @click.prevent=\"stop\" :disabled=\"!stream\">Stop</button>\n    </div>\n    <h3 v-if=\"status == 'starting'\"> Loading video stream ...  </h3>\n    <div class=\"video-vtn\">\n      <video autoplay=\"autoplay\" :srcObject.prop=\"stream\" ref=\"videoStream\" playsinline width=\"640px\" height=\"480px\"></video>\n    </div>\n    <div v-if=\"!stream\">No Stream</div>\n    <div>Status: {{ status ? status : \"No video stream\" }}</div>\n    <div v-if=\"error\">{{ error }}</div>\n  </div>\n</template>\n\n<script>\nimport { Janus } from 'janus-gateway'\n\n// const JANUS_URL = 'http://127.0.0.1:8088/janus'\n//const JANUS_URL = 'http://34.87.84.21:8088/janus'\nlet JANUS_URL = 'https://34.143.225.243:8089/janus'\nif(window.location.protocol === 'http:'){\n   JANUS_URL = 'http://34.143.225.243:8088/janus'\n}\n\n\nexport default {\n  name: 'App',\n  data(){\n    return {\n      janus: null,\n      error: null,\n      plugin: null,\n      status: null,\n      stream: null,\n      streamList: {\n        selected: null,\n        options: []\n      },\n      remoteTracks : {},\n      remoteVideos : 0,\n    }\n  },\n  mounted() {\n    Janus.init({\n      debug: true,\n      dependencies: Janus.useDefaultDependencies(),\n      callback: ()=>{\n        console.log(\"Connecting to Janus api with server \",JANUS_URL)\n        this.connect(JANUS_URL)\n      }\n    })\n  },\n  methods:{\n    connect(server){\n      this.janus = new Janus({server,\n        // Call success callback\n        success: ()=>{\n          console.log(\"Connected\")\n          this.attachPlugin()\n        },\n        // Call error callback \n        error: (error)=>{\n          console.log(\"Error\")\n          this.onError('Failed to connect janus server',error)\n        },\n        // Call destroyed callback\n        destroyed: ()=>{\n          console.log(\"Destroyed\")\n          window.location.reload()\n        }\n      })\n    },\n\n    attachPlugin() {\n      this.janus.attach({\n        plugin: \"janus.plugin.streaming\",\n        opaqueId: 'thisisopaqueid',\n        success: (pluginHandle) => {\n          this.plugin = pluginHandle\n          console.log(\"getBitrate : \",this.plugin.getBitrate())\n          this.updateStreamsList()\n        },\n        error: (error) => {\n          this.onError('Error attaching plugin... ', error)\n        },\n        iceState: (state) => {\n          console.log(\"ICE state changed to \",state)\n        },\n        webrtcState: (on) => {\n          console.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\")\n        },\n        slowLink: (uplink, lost, mid) => {\n          console.log(\"Janus reports problems \" + (uplink ? \"sending\" : \"receiving\") +\n\t\t\t\t\t\t\t\t\t\t\" packets on mid \" + mid + \" (\" + lost + \" lost packets)\")\n        },\n        onmessage: (msg, jsep) => {\n          // Receive status of plugin streaming \n          console.log(\" ::: Got a message :::\", msg)\n          let result = msg.result\n          if(result){\n            if(result.status){\n              this.status = result.status\n            }\n          }\n          // Handle msg error status \n          else if (msg.error) {\n            this.onError(msg.error)\n            this.stop()\n            return ;\n          }\n          if(jsep) {\n            Janus.debug(\"Handling SDP as Well... \", jsep)\n            let stereo = (jsep.sdp.indexOf(\"stereo=1\") !== -1 )\n            this.plugin.createAnswer({\n              jsep: jsep,\n              media: {\n                audioSend: false,\n                videoSend: false,\n                data: true\n              },\n              customizeSdp: (jsep) => {\n                if(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1 ) {\n                  jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\")\n                }\n              },\n              success: (jsep) => {\n                Janus.debug(\"Got SDP!\", jsep)\n                let body = { request: \"start\"}\n                this.plugin.send({\n                  message: body,\n                  jsep: jsep\n                })\n              },\n              error: (error) => {\n                this.onError(\"WebRTC Error: \",error)\n                alert(\"WebRTC error... \" , error)\n              }\n            })\n          }\n        },\n        onremotetrack: (track , mid, on) => {\n          Janus.debug(\"Remote track (mid=\" + mid + \") \" + (on ? \"added\" : \"removed\") + \":\", track)\n          // New track was added \n          if(track.kind === \"video\") {\n            this.remoteVideos++ \n            this.stream = new MediaStream()\n            this.stream.addTrack(track.clone())\n            this.remoteTracks.mid = this.stream\n            Janus.log(\"Created remote audio stream:\", this.stream)\n          }\n        },\n        \n        oncleanup: () => {\n          this.onCleanup()\n        }\n      })\n    },\n    updateStreamsList() {\n      this.plugin.send ({\n        message: { request: \"list\"},\n        success: (result) => {\n          if(!result) {\n            this.onError(\"Got no response to our query for available streams.\")\n          }\n          console.log(\"Updating StreamList....\",result)\n          this.streamList.options = result.list\n          if (result.list.length) {\n            this.streamList.selected = this.streamList.options[0].id\n          }\n        }\n      })\n    },\n    start() {\n      this.plugin.send({ message: { request: \"watch\", id: this.streamList.selected } })\n    },\n    stop() {\n      this.plugin.send({ message: { request: \"stop\" } } )\n      this.plugin.hangup()\n    },\n    // Reset data.params to null \n    onCleanup() {\n      Janus.log(\" ::: Got a cleanup notification :::\");\n      this.stream = null\n      this.status = null \n      this.remoteTracks = {}\n      this.remoteVideos = 0\n      this.error = null \n    },\n    // Handle on error event occur\n    onError(message, error='') {\n      Janus.error(message, error)\n      this.error = message + error\n      alert(this.error, function() {\n        window.location.reload()\n      })\n    }\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #48627c;\n  margin-top: 60px;\n}\ndiv {\n  margin-bottom: 1.5rem;\n}\nbutton {\n  padding: .5rem .7rem;\n  margin: 0 .5rem 0 .5rem;\n}\nvideo {\n  width: 50%;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}