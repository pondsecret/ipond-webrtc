{"ast":null,"code":"import _asyncToGenerator from \"/home/pond/security-drone/web-demo/ipond-webrtc/node_modules/@vue/babel-preset-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ImageGallery from '@/components/ImageGallery.vue';\nimport UserProfile from '@/components/UserProfile.vue';\nimport { Janus } from 'janus-gateway';\nimport RecordTimer from '@/components/RecordTimer.vue'; // webRTC server location\n\nvar JANUS_URL = 'https://34.143.225.243:8089/janus';\n\nif (window.location.protocol === 'http:') {\n  JANUS_URL = 'http://34.143.225.243:8088/janus';\n}\n\nexport default {\n  name: \"StreamingVideo\",\n  data: function data() {\n    return {\n      // assets\n      assets: {\n        record: require('../../assets/record.svg'),\n        recording: require('../../assets/recording.svg'),\n        stoprecord: require('../../assets/stoprecord.svg'),\n        rec: require('../../assets/rec.svg'),\n        drone: require('../../assets/carbon_drone.svg')\n      },\n      timer: {\n        state: 'stopped',\n        current: 0,\n        formatted: \"00:00:00\",\n        ticker: undefined\n      },\n      idleState: false,\n      idleTimer: null,\n      currentDrone: null,\n      localVideo: document.getElementById('myVideo'),\n      chunks: [],\n      hangup: false,\n      mediaRecorder: null,\n      h_snackbar: false,\n      vid_src: null,\n      snackbar: false,\n      recording: false,\n      False: false,\n      openProfile: false,\n      openGallery: false,\n      mini: true,\n      colors: {\n        background: \"#fff\",\n        text: \"#ffffff\",\n        vid_bg: \"#404040\"\n      },\n      menus: [{\n        title: \"Drone01\",\n        icon: \"mdi-quadcopter\"\n      }, {\n        title: \"Drone02\",\n        icon: \"mdi-quadcopter\"\n      }, {\n        title: \"Drone03\",\n        icon: \"mdi-quadcopter\"\n      }],\n      users: {\n        name: \"ICS Team\",\n        email: \"icsco.dev@gmail.com\",\n        src: \"https://randomuser.me/api/portraits/men/85.jpg\"\n      },\n      attach: {\n        plugin: null,\n        message: {\n          status: null\n        },\n        streamList: {\n          selected: null,\n          options: []\n        },\n        remote: {\n          video: 0,\n          track: {},\n          stream: null\n        }\n      },\n      janusError: null\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    Janus.init({\n      debug: true,\n      dependencies: Janus.useDefaultDependencies(),\n      callback: function callback() {\n        // console.log(\"Connecting to Janus api with server \",JANUS_URL)\n        _this.connect(JANUS_URL);\n      }\n    });\n  },\n  methods: {\n    startTimer: function startTimer() {\n      console.log(\"Start timer\");\n\n      if (this.timer.state !== 'running') {\n        this.tick();\n        this.timer.state = 'running';\n      }\n    },\n    tick: function tick() {\n      var _this2 = this;\n\n      // count up every second\n      this.timer.ticker = setInterval(function () {\n        _this2.timer.current += 1;\n        _this2.timer.formatted = _this2.formatTime(_this2.timer.current);\n      }, 1000);\n    },\n    formatTime: function formatTime(seconds) {\n      var m_time = new Date(null);\n      m_time.setSeconds(seconds);\n      var HMSTime = m_time.toISOString().substr(11, 8);\n      return HMSTime;\n    },\n    showGallery: function showGallery() {\n      this.openGallery = true;\n      console.log(this.openGallery);\n      return this.openGallery;\n    },\n    setOpenGallery: function setOpenGallery(value) {\n      this.openGallery = value;\n    },\n    showProfile: function showProfile() {\n      this.openProfile = true;\n      return this.openProfile;\n    },\n    setOpenProfile: function setOpenProfile(value) {\n      this.openProfile = value;\n    },\n    // Janus Implement\n    // Connect to Janus\n    connect: function connect(server) {\n      var _this3 = this;\n\n      this.janus = new Janus({\n        server: server,\n        // Call on success callback\n        success: function success() {\n          console.log(\"Connected\");\n\n          _this3.attachPlugin();\n        },\n        // Call on error callback\n        error: function error(err) {\n          console.log(\"Error establish connection to Janus server! Please check the server status.\");\n\n          _this3.onError(\"Failed to connect Janus server \", err);\n        },\n        destroyed: function destroyed() {\n          console.log(\"Destroyed\");\n        }\n      });\n    },\n    // Attach Plugin\n    attachPlugin: function attachPlugin() {\n      var _this4 = this;\n\n      this.janus.attach({\n        plugin: \"janus.plugin.streaming\",\n        opaqueId: 'thisisopaqueid',\n        // on Attach plugin success\n        success: function success(pluginHandle) {\n          _this4.attach.plugin = pluginHandle;\n          console.log(\"Attach Plugin Success\");\n\n          _this4.updateStreamsList();\n        },\n        // on Attach plugin error\n        error: function error(err) {\n          _this4.onError(\"Error attaching plugin...! \", err);\n        },\n        iceState: function iceState(state) {\n          console.log(\"ICE state changed to \", state);\n        },\n        webrtcState: function webrtcState(on) {\n          console.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\");\n        },\n        slowLink: function slowLink(uplink, lost, mid) {\n          console.log(\"Janus reports problems \" + (uplink ? \"sending\" : \"receiving\") + \" packets on mid \" + mid + \" (\" + lost + \" lost packets)\");\n        },\n        onmessage: function onmessage(msg, jsep) {\n          // Get message \n          var result = msg.result;\n\n          if (result) {\n            if (result.status) {\n              _this4.attach.message.status = result.status;\n            }\n          } // Handle error message\n          else if (msg.error) {\n            _this4.onError(msg.error);\n\n            return;\n          } // Handle jsep\n\n\n          if (jsep) {\n            Janus.debug(\"Handling SDP as Well.... \", jsep);\n            var stereo = jsep.sdp.indexOf(\"stereo=1\") !== -1;\n\n            _this4.attach.plugin.createAnswer({\n              jsep: jsep,\n              media: {\n                audioSend: false,\n                videoSend: false,\n                data: true\n              },\n              customizeSdp: function customizeSdp(jsep) {\n                if (stereo && jsep.sdp.indexOf(\"stereo=1\") == -1) {\n                  jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\");\n                }\n              },\n              success: function success(jsep) {\n                Janus.debug(\"Got SDP!\", jsep);\n                var body = {\n                  request: \"start\"\n                };\n\n                _this4.attach.plugin.send({\n                  message: body,\n                  jsep: jsep\n                });\n              },\n              error: function error(_error) {\n                console.log(_error); // this.onError(\"WebRTC Error: \",error)\n              }\n            });\n          }\n        },\n        onremotetrack: function onremotetrack(track, mid, on) {\n          Janus.debug(\"Remote track (mid=\" + mid + \") \" + (on ? \"added\" : \"removed\") + \":\", track); // New track was added \n\n          if (track.kind === \"video\") {\n            _this4.attach.remote.video += 1;\n            _this4.attach.remote.stream = new MediaStream();\n\n            _this4.attach.remote.stream.addTrack(track.clone());\n\n            _this4.attach.remote.track.mid = _this4.attach.remote.stream;\n            Janus.log(\"Created remote video stream:\", _this4.attach.remote.stream);\n          }\n        },\n        oncleanup: function oncleanup() {\n          _this4.onCleanupCall();\n        }\n      });\n    },\n    // Stream List updater\n    updateStreamsList: function updateStreamsList() {\n      var _this5 = this;\n\n      this.attach.plugin.send({\n        message: {\n          request: \"list\"\n        },\n        success: function success(result) {\n          if (!result) {\n            _this5.onError(\"Got no response to our query for available streams.\");\n          }\n\n          console.log(\"Updating StreamList....\", result);\n          _this5.attach.streamList.options = result.list; // if (result.list.length) {\n          //   this.attach.streamList.selected = this.attach.streamList.options[1].id\n          // }\n        }\n      });\n    },\n    // stop stream\n    stopStream: function stopStream() {\n      this.attach.plugin.send({\n        message: {\n          request: \"stop\"\n        }\n      });\n    },\n    // start stream\n    start: function start(idx, description) {\n      // this.stop()\n      // if(this.attach.remote.stream !== null){\n      //   this.stop()\n      // }\n      if (this.currentDrone !== null) {\n        this.currentDrone = description;\n        this.attach.streamList.selected = this.attach.streamList.options[idx].id;\n        this.vid_src = this.attach.remote.stream;\n        this.attach.plugin.send({\n          message: {\n            request: \"switch\",\n            id: this.attach.streamList.selected\n          }\n        });\n      } else {\n        this.currentDrone = description;\n        this.attach.streamList.selected = this.attach.streamList.options[idx].id;\n        this.vid_src = this.attach.remote.stream;\n        this.attach.plugin.send({\n          message: {\n            request: \"watch\",\n            id: this.attach.streamList.selected\n          }\n        });\n      } // this.attach.streamList.selected = this.attach.streamList.options[index].id\n\n    },\n    // Clean up parameter\n    onCleanupCall: function onCleanupCall() {\n      Janus.log(\"Cleaning up.....!\");\n      this.attach.remote.stream = null;\n      this.attach.remote.video = 0;\n      this.attach.remote.track = {};\n      this.attach.message.status = null;\n      this.janusError = null;\n    },\n    // Handle Janus Errors\n    onError: function onError(msg) {\n      var err = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      Janus.error(msg, err);\n      this.janusError = msg + err;\n      alert(this.janusError, function () {\n        window.location.reload();\n      });\n    },\n    // Record zone\n    startRecord: function startRecord() {\n      var _this6 = this;\n\n      return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var options, mediaStreamObj;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this6.recording = true;\n                options = {\n                  videoBitsPerSecond: 2500000,\n                  mimeType: 'video/webm;codecs=h264'\n                };\n\n                if (MediaRecorder.isTypeSupported(options.mimeType)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                alert('mimeType: ' + options.mimeType + \" Not supported\");\n                return _context.abrupt(\"return\");\n\n              case 5:\n                // get MediaStream Object \n                mediaStreamObj = _this6.attach.remote.stream;\n\n                if (mediaStreamObj) {\n                  _context.next = 9;\n                  break;\n                }\n\n                alert(\"Cannot initialize mediaStreamObj\");\n                return _context.abrupt(\"return\");\n\n              case 9:\n                // create MediaRecorder Object \n                _this6.mediaRecorder = new MediaRecorder(mediaStreamObj, options);\n                console.log(_this6.mediaRecorder);\n\n                _this6.mediaRecorder.start(); // Start timer onStart Event \n\n\n                _this6.mediaRecorder.addEventListener('start', function () {\n                  _this6.startTimer();\n                }); // Listen dataavailable event\n\n\n                _this6.mediaRecorder.addEventListener('dataavailable', function (e) {\n                  if (e.data && e.data.size > 0) {\n                    _this6.chunks.push(e.data);\n                  }\n\n                  console.log(\"Data =========== \", _this6.chunks);\n                }, true);\n\n              case 14:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }))();\n    },\n    stopRecord: function stopRecord() {\n      var _this7 = this;\n\n      this.mediaRecorder.stop();\n      this.recording = false;\n      this.mediaRecorder.addEventListener('stop', function () {\n        var blobldata = new Blob(_this7.chunks);\n\n        if (blobldata.size > 0) {\n          console.log(\"Collected data size ===== \", blobldata.size); // save data \n\n          var blobUrl = URL.createObjectURL(blobldata);\n          console.log(\"URL ======= \", blobUrl); // auto download\n\n          var link = document.createElement('a');\n          link.href = blobUrl;\n          link.download = _this7.dateFormat() + '.webm';\n          document.body.appendChild(link);\n          link.click();\n          document.body.removeChild(link);\n          window.URL.revokeObjectURL(blobUrl);\n        } // clear \n\n\n        _this7.chunks = [];\n        _this7.mediaRecorder = null;\n      }, true);\n    },\n    dateFormat: function dateFormat() {\n      var datetime = new Date();\n      var today = datetime.getDate() + '-' + (datetime.getMonth() + 1) + '-' + datetime.getFullYear() + ' at ' + datetime.getHours() + '.' + datetime.getMinutes();\n      return today;\n    }\n  },\n  components: {\n    ImageGallery: ImageGallery,\n    UserProfile: UserProfile,\n    RecordTimer: RecordTimer\n  }\n};","map":{"version":3,"mappings":"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","names":["JANUS_URL","name","data","assets","record","recording","stoprecord","rec","drone","timer","state","current","formatted","ticker","idleState","idleTimer","currentDrone","localVideo","chunks","hangup","mediaRecorder","h_snackbar","vid_src","snackbar","False","openProfile","openGallery","mini","colors","background","text","vid_bg","menus","title","icon","users","email","src","attach","plugin","message","status","streamList","selected","options","remote","video","track","stream","janusError","mounted","Janus","debug","dependencies","callback","methods","startTimer","console","tick","formatTime","seconds","m_time","showGallery","setOpenGallery","value","showProfile","setOpenProfile","connect","server","success","error","destroyed","attachPlugin","opaqueId","iceState","webrtcState","slowLink","mid","lost","onmessage","jsep","media","audioSend","videoSend","customizeSdp","request","onremotetrack","oncleanup","updateStreamsList","stopStream","start","idx","description","id","onCleanupCall","onError","msg","alert","window","startRecord","videoBitsPerSecond","mimeType","MediaRecorder","mediaStreamObj","stopRecord","link","document","dateFormat","components","ImageGallery","UserProfile","RecordTimer"],"sourceRoot":"src/views/Main","sources":["StreamingVideo.vue"],"sourcesContent":["<template>\n  <v-container fill-height fluid class=\"pa-0 ma-0 \" ref=\"main\" width=\"100%\">\n    <v-card width=\"100%\" height=\"100%\" class=\"d-flex\" :color=\"colors.vid_bg\">\n        <!-- main menu drawer -->\n      <v-navigation-drawer\n      class=\"nav-drawer\"\n      :mini-variant.sync=\"mini\"\n      mini-variant-width=\"80\"\n      clipped\n      app\n      ref=\"navDrawer\"\n      width=\"300\"\n      permanent\n      >\n\n        <!-- List menus -->\n        <v-list-item class=\"px-2 my-4\">\n          <v-list-item-avatar>\n            <!-- <v-img :src=\"users.src\" ></v-img> -->\n            <v-avatar\n            color=\"blue lighten-3\">ICS</v-avatar>\n          </v-list-item-avatar>\n\n          <v-list-item-title>\n            <h3 style=\"color:#2F75BB\">{{users.name}}</h3>\n            <h5 class=\"pt-2\">{{users.email}}</h5>\n          </v-list-item-title>\n\n          <v-btn\n          icon\n          @click.stop=\"mini = !mini\"\n          >\n          <v-icon :color=\"colors.text\">mdi-chevron-left</v-icon>\n          </v-btn>\n        </v-list-item>\n        \n        <v-divider :color=\"colors.text\" class=\"my-4 mx-2 \"></v-divider>\n\n        <v-list  two-line dense nav>\n          <v-list-item-group\n          id=\"list-group\"\n          active-class=\"bg-active\">\n            <!-- <v-list-item\n            :color=\"colors.text\"\n            v-for=\"menu in menus\"\n            :key=\"menu.title\">\n              <v-list-item-icon class=\"my-6\" >\n                <v-icon >{{menu.icon}}</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3>{{menu.title}}</h3></v-list-item-title>\n              </v-list-item-content>\n            </v-list-item> -->\n          \n\n            <v-list-item \n            \n            v-for=\"option, index in attach.streamList.options\"\n            :key=\"option.id\"\n            @click=\"start(index,option.description)\"\n            class=\"drone-list\" \n            v-on:mouseover=\"hoverring=true\">\n              <v-list-item-icon class=\"my-8\" >\n                <!-- <v-icon>mdi-drone_carbon</v-icon> -->\n                <v-img :src=\"assets.drone\" class=\"py-6 my-n3\" color=\"red\"></v-img>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3 class=\"list-text\">{{ option.description }}</h3></v-list-item-title>\n              </v-list-item-content>\n              \n            </v-list-item>\n\n            <!-- Gallery -->\n            <v-list-item\n            @click.prevent=\"showGallery\"\n            :color=\"colors.text\">\n              <v-list-item-icon class=\"my-6\">\n                <v-icon>mdi-image-multiple</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3 class=\"list-text\">Gallery</h3></v-list-item-title>\n              </v-list-item-content>\n\n              <!-- Gallery component -->\n              <ImageGallery \n              :showDialog=\"openGallery\"\n              @closeGallery=\"setOpenGallery\"\n              />\n            </v-list-item>\n\n            <!-- User Profile -->\n            <v-list-item\n            @click.prevent=\"showProfile\">\n              <v-list-item-icon class=\"my-6\">\n                <v-icon>mdi-account</v-icon>\n              </v-list-item-icon>\n              <v-list-item-content>\n                <v-list-item-title><h3 class=\"list-text\">My Account</h3></v-list-item-title>\n              </v-list-item-content>\n\n              <!-- User Profile component -->\n              <UserProfile \n              :showProfile=\"openProfile\"\n              :username=\"users.name\"\n              :useremail=\"users.email\"\n              :userimgsrc=\"users.src\"\n              @closeUserProfile=\"setOpenProfile\"\n              />\n            </v-list-item>\n          </v-list-item-group>\n        </v-list>\n\n        <!-- List menus -->\n      </v-navigation-drawer>\n      <!-- main menu drawer -->\n\n      <!-- Video field -->\n      <v-card width=\"100%\" height=\"100%\" tile class=\"d-flex justify-center \" :color=\"colors.vid_bg\">\n        <video id=\"player\"  :srcObject.prop=\"attach.remote.stream\"  playsinline autoplay loop ></video>\n\n        <!-- Video Overlay record button -->\n\n        <v-hover\n        close-delay=\"1500\">\n          <template v-slot:default=\"{ hover }\">\n            <v-overlay\n            absolute\n            opacity=\"0\"\n            style=\"height:20% ; width:100%;  top:80%\"\n            :dark=\"False\"\n            z-index=\"3\"\n            class=\"triggerOverlay\"\n            >\n            <v-card class=\"d-flex py-6 px-10  justify-space-around \"\n              elevation=\"8\"\n              id=\"control-card\"\n              v-if=\"hover\">\n                <v-tooltip top>\n                  <template v-slot:activator=\"{on}\">\n                    <v-btn\n                    v-on=\"on\"\n                    plain\n                    @click=\"startRecord\">\n                      <v-img v-if=\"recording === false\" :src=\"assets.record\" class=\"pa-2\"\n                      max-width=\"51\"></v-img>\n                      <v-img v-if=\"recording === true\" :src=\"assets.recording\" class=\"pa-2\"\n                      max-width=\"51\"></v-img>\n                    </v-btn>\n                  </template>\n                  Start record\n                </v-tooltip>\n                <v-tooltip top>\n                  <template v-slot:activator=\"{on}\">\n                    <v-btn\n                    v-on=\"on\"\n                    class=\"pa-1\"\n                    plain\n                    @click=\"stopRecord\">\n                      <v-img :src=\"assets.stoprecord\"\n                      max-width=\"51\"\n                      max-height=\"51\"></v-img>\n                    </v-btn>\n                  </template>\n                  Stop recording\n                </v-tooltip>\n              </v-card>\n            </v-overlay>\n          </template>\n        </v-hover>\n\n        <!-- Selected drone -->\n        <v-overlay\n        opacity=\"0\"\n        style=\"height:0px; width:400px; position: fixed; top:30px; right:50px;\"\n        :dark=\"False\"\n        class=\"d-flex justify-center \"\n        >\n          <h2 color=\"white\" class=\"current-drone ml-4 mr-8\">{{currentDrone}}</h2>\n          <div v-if=\"recording === true\"  class=\"d-flex align-center\"\n          style=\"position:fixed; top:60px;right:35px\">\n            <v-img :src=\"assets.rec\"\n            max-width=\"32\" id=\"rec-img\"></v-img>\n            <RecordTimer  \n            :timer=\"timer.formatted\"\n            :state=\"timer.state\"\n            />\n          </div>\n        </v-overlay>\n      </v-card>    \n    </v-card>\n\n  </v-container>\n</template>\n\n<script>\nimport ImageGallery from '@/components/ImageGallery.vue'\nimport UserProfile from '@/components/UserProfile.vue';\n\n\n\nimport { Janus } from 'janus-gateway'\nimport RecordTimer from '@/components/RecordTimer.vue';\n\n// webRTC server location\nlet JANUS_URL = 'https://34.143.225.243:8089/janus'\nif(window.location.protocol === 'http:'){\n   JANUS_URL = 'http://34.143.225.243:8088/janus'\n}\n\nexport default {\n    name: \"StreamingVideo\",\n    data: () => {\n        return {  \n            // assets\n            assets:{\n              record: require('../../assets/record.svg'),\n              recording: require('../../assets/recording.svg'),\n              stoprecord: require('../../assets/stoprecord.svg'),\n              rec: require('../../assets/rec.svg'),\n              drone: require('../../assets/carbon_drone.svg')\n            },\n            timer:{\n              state: 'stopped',\n              current: 0,\n              formatted: \"00:00:00\",\n              ticker: undefined, \n            },\n            idleState: false,\n            idleTimer: null,\n            currentDrone: null,\n            localVideo: document.getElementById('myVideo'),\n            chunks: [],\n            hangup: false,\n            mediaRecorder: null,\n            h_snackbar: false,\n            vid_src: null,\n            snackbar: false,\n            recording: false,\n            False : false,\n            openProfile: false,\n            openGallery: false,\n            mini: true,\n            colors: {\n                background: \"#fff\",\n                text: \"#ffffff\",\n                vid_bg: \"#404040\"\n            },\n            menus: [\n                { title: \"Drone01\", icon: \"mdi-quadcopter\" },\n                { title: \"Drone02\", icon: \"mdi-quadcopter\" },\n                { title: \"Drone03\", icon: \"mdi-quadcopter\" },\n            ],\n            users:{\n              name: \"ICS Team\",\n              email: \"icsco.dev@gmail.com\",\n              src:  \"https://randomuser.me/api/portraits/men/85.jpg\"\n            },\n            attach:{\n              plugin: null,\n              message: {\n                status: null\n              },\n              streamList: {\n                selected: null,\n                options: []\n              },\n              remote: {\n                video: 0,\n                track: {},\n                stream: null,\n              }\n            },\n            janusError: null\n        };\n    },\n    mounted() {\n      Janus.init({\n        debug: true,\n        dependencies: Janus.useDefaultDependencies(),\n        callback: ()=>{\n          // console.log(\"Connecting to Janus api with server \",JANUS_URL)\n          this.connect(JANUS_URL)\n        }\n      })\n    },\n    methods: {\n        \n        startTimer(){\n          console.log(\"Start timer\")\n          if(this.timer.state !== 'running'){\n            this.tick();\n            this.timer.state = 'running';\n          }\n        },\n        tick(){\n          // count up every second\n          this.timer.ticker = setInterval(() => {\n            this.timer.current += 1;\n            this.timer.formatted = this.formatTime(this.timer.current)\n          }, 1000)\n        },\n        formatTime(seconds){\n          let m_time = new Date(null)\n          m_time.setSeconds(seconds)\n          let HMSTime = m_time.toISOString().substr(11,8)\n          return HMSTime\n        },\n        showGallery() {\n            this.openGallery = true;\n            console.log(this.openGallery)\n            return this.openGallery;\n        },\n        setOpenGallery(value){\n          this.openGallery = value\n        },\n        showProfile(){\n          this.openProfile = true;\n          return this.openProfile\n        },\n        setOpenProfile(value){\n          this.openProfile = value\n        },\n        \n\n        // Janus Implement\n        // Connect to Janus\n        connect(server){\n          this.janus = new Janus({server,\n            // Call on success callback\n            success: ()=>{\n              console.log(\"Connected\")\n              this.attachPlugin()\n            },\n            // Call on error callback\n            error: (err)=>{\n              console.log(\"Error establish connection to Janus server! Please check the server status.\")\n              this.onError(\"Failed to connect Janus server \",err)\n            },\n            destroyed: ()=>{\n              console.log(\"Destroyed\")\n            }\n          })\n        },\n\n        // Attach Plugin\n        attachPlugin() {\n          this.janus.attach({\n            plugin:   \"janus.plugin.streaming\",\n            opaqueId: 'thisisopaqueid',\n            // on Attach plugin success\n            success: (pluginHandle) => {\n              this.attach.plugin = pluginHandle\n              console.log(\"Attach Plugin Success\")\n              this.updateStreamsList()\n            },\n            // on Attach plugin error\n            error: (err) => {\n              this.onError(\"Error attaching plugin...! \",err)\n            },\n            iceState: (state) => {\n              console.log(\"ICE state changed to \",state)\n            },\n            webrtcState: (on) => {\n              console.log(\"Janus says our WebRTC PeerConnection is \" + (on ? \"up\" : \"down\") + \" now\")\n            },\n            slowLink: (uplink, lost, mid) => {\n              console.log(\"Janus reports problems \" + (uplink ? \"sending\" : \"receiving\") +\n                        \" packets on mid \" + mid + \" (\" + lost + \" lost packets)\")\n            },\n            onmessage: (msg, jsep) => {\n              // Get message \n              let result = msg.result\n              if(result){\n                if(result.status){\n                  this.attach.message.status = result.status\n                }\n              }\n              // Handle error message\n              else if(msg.error){\n                this.onError(msg.error)\n                return;\n              }\n\n              // Handle jsep\n              if(jsep){\n                Janus.debug(\"Handling SDP as Well.... \",jsep)\n                let stereo = (jsep.sdp.indexOf(\"stereo=1\") !== -1 )\n                this.attach.plugin.createAnswer({\n                  jsep: jsep,\n                  media: {\n                    audioSend: false,\n                    videoSend: false,\n                    data:      true,\n                  },\n                  customizeSdp: (jsep) => {\n                    if(stereo && jsep.sdp.indexOf(\"stereo=1\") == -1 ) {\n                      jsep.sdp = jsep.sdp.replace(\"useinbandfec=1\", \"useinbandfec=1;stereo=1\")\n                    }\n                  },\n                  success: (jsep) => {\n                    Janus.debug(\"Got SDP!\", jsep)\n                    let body = { request: \"start\"}\n                    this.attach.plugin.send({\n                      message: body,\n                      jsep: jsep\n                    })\n                  },\n                  error: (error) => {\n                    console.log(error)\n                    // this.onError(\"WebRTC Error: \",error)\n                  }\n                })\n              }\n            },\n            onremotetrack: (track , mid, on) => {\n              Janus.debug(\"Remote track (mid=\" + mid + \") \" + (on ? \"added\" : \"removed\") + \":\", track)\n              // New track was added \n              if(track.kind === \"video\") {\n                this.attach.remote.video += 1 \n                this.attach.remote.stream = new MediaStream()\n                this.attach.remote.stream.addTrack(track.clone())\n                this.attach.remote.track.mid = this.attach.remote.stream\n                Janus.log(\"Created remote video stream:\", this.attach.remote.stream)\n              }\n            },\n\n            oncleanup: () => {\n              this.onCleanupCall()\n            }\n          })\n        },\n      // Stream List updater\n      updateStreamsList() {\n        this.attach.plugin.send ({\n          message: { request: \"list\"},\n          success: (result) => {\n            if(!result) {\n              this.onError(\"Got no response to our query for available streams.\")\n            }\n            console.log(\"Updating StreamList....\",result)\n            this.attach.streamList.options = result.list\n            // if (result.list.length) {\n            //   this.attach.streamList.selected = this.attach.streamList.options[1].id\n            // }\n          }\n        })\n      },\n      // stop stream\n      stopStream() {\n        this.attach.plugin.send({ message: { request: \"stop\" } } )\n      },\n      // start stream\n      start(idx,description){\n        // this.stop()\n        // if(this.attach.remote.stream !== null){\n        //   this.stop()\n        // }\n\n        if(this.currentDrone !== null){\n          this.currentDrone = description\n          this.attach.streamList.selected = this.attach.streamList.options[idx].id\n          this.vid_src = this.attach.remote.stream\n          this.attach.plugin.send({ message: { request: \"switch\" , id: this.attach.streamList.selected}} )\n        }else{\n          this.currentDrone = description\n          this.attach.streamList.selected = this.attach.streamList.options[idx].id\n          this.vid_src = this.attach.remote.stream\n          this.attach.plugin.send({ message: { request: \"watch\", id: this.attach.streamList.selected } })\n        }\n        // this.attach.streamList.selected = this.attach.streamList.options[index].id\n        \n      },\n      // Clean up parameter\n      onCleanupCall(){\n        Janus.log(\"Cleaning up.....!\")\n        this.attach.remote.stream = null\n        this.attach.remote.video = 0\n        this.attach.remote.track = {}\n        this.attach.message.status = null\n        this.janusError = null\n      },\n\n      // Handle Janus Errors\n      onError(msg, err='') {\n        Janus.error(msg, err)\n        this.janusError = msg + err\n        alert(this.janusError, function(){\n          window.location.reload()\n        })\n      },\n      // Record zone\n      async startRecord() {\n\n        this.recording = true\n\n        const options = {\n            videoBitsPerSecond : 2500000,\n            mimeType : 'video/webm;codecs=h264'\n          }\n        if(!MediaRecorder.isTypeSupported(options.mimeType)){\n          alert('mimeType: '+ options.mimeType + \" Not supported\")\n          return ;\n        }\n\n        // get MediaStream Object \n        const mediaStreamObj = this.attach.remote.stream\n        if(!mediaStreamObj){\n          alert(\"Cannot initialize mediaStreamObj\")\n          return\n        }\n\n        // create MediaRecorder Object \n        this.mediaRecorder = new MediaRecorder(mediaStreamObj, options)\n        console.log(this.mediaRecorder)\n\n        this.mediaRecorder.start()\n\n        // Start timer onStart Event \n        this.mediaRecorder.addEventListener('start',()=> {\n          this.startTimer()\n        })\n\n        // Listen dataavailable event\n        this.mediaRecorder.addEventListener('dataavailable' ,(e) => {\n          if (e.data && e.data.size > 0) {\n            this.chunks.push(e.data)\n          }\n          console.log(\"Data =========== \",this.chunks)\n        },true)\n      },\n      stopRecord(){\n\n        this.mediaRecorder.stop()\n        this.recording = false\n        this.mediaRecorder.addEventListener('stop', ()=> {\n          const blobldata = new Blob(this.chunks)\n          if(blobldata.size > 0){\n            console.log(\"Collected data size ===== \",blobldata.size)\n\n            // save data \n            const blobUrl = URL.createObjectURL(blobldata)\n            console.log(\"URL ======= \", blobUrl)\n\n            // auto download\n            const link = document.createElement('a')\n            link.href = blobUrl\n\n            link.download = this.dateFormat()+'.webm'\n\n            document.body.appendChild(link)\n            link.click()\n            document.body.removeChild(link)\n\n            window.URL.revokeObjectURL(blobUrl)\n          }\n\n          // clear \n          this.chunks = []\n          this.mediaRecorder = null \n        },true)\n      },\n      dateFormat(){\n        const datetime = new Date()\n        const today = datetime.getDate() + '-' + (datetime.getMonth()+1) + '-' + datetime.getFullYear() + ' at ' + datetime.getHours() + '.' + datetime.getMinutes()\n        return today\n      }\n      \n      \n      \n    },\n\n\n\n    \n    components: { ImageGallery, UserProfile, RecordTimer }\n}\n</script>\n\n<style>\n:-webkit-scrollbar{\n    width:2px;\n}\n::-webkit-scrollbar-track {\n\t\n  background: #f1f1f1; \n}\n \n/* Handle */\n::-webkit-scrollbar-thumb {\n  background: #888; \n}\n\n/* Handle on hover */\n::-webkit-scrollbar-thumb:hover {\n  background: #555; \n}\n\n#control-card {\n  background: linear-gradient(180deg, #E0E0E0 0%, rgba(224, 224, 224, 0.1) 100%);\n  backdrop-filter: blur(20px);\n  border-radius: 17px;\n  box-shadow: 0px 4px 24px -1px rgba(0, 0, 0, 0.2);\n  transition: opacity 0.6s ease-out;\n}\n\n.current-drone {\n  color: #ffffff;\n  font-size: 40px;\n  position: fixed;\n  top:0px;\n  right:0px;\n}\n\n.list-text{\n  font-size: 19px;\n}\n\n@keyframes recOpacity {\n  0% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 1;\n  }\n}\n\n#rec-img {\n  animation: recOpacity 1.5s infinite;\n}\n\n.nav-drawer {\n  background: linear-gradient(90deg, #5999E5 -2.52%, rgba(89, 153, 229, 0.25) 168.35%);\n  opacity: 0.95;\n}\n\n.bg-active {\n  background-color: black;\n  color : white !important;\n}\n\n</style>"]},"metadata":{},"sourceType":"module"}